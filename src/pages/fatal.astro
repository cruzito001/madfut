---
import Layout from '../layouts/Layout.astro';
import FatalGrid from '../components/Fatal/FatalGrid';
---

<Layout title="FATAL - MadFut Community">
  <main class="fatal-page">
    <h1>
      FATAL My Club
      <span class="badge">S13</span>
    </h1>
    <FatalGrid client:load />
    <div class="disclaimer">
      <svg xmlns="http://www.w3.org/2000/svg" class="disclaimer-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
      <p>We always strive to provide the best solution and an alternative without LTM Cards.</p>
    </div>
  </main>

  <div id="imageModal" class="modal">
    <div class="modal-content">
      <span id="closeModal" class="close-modal">&times;</span>
      <img id="modalImage" class="modal-image" src="" alt="" />
      <button id="downloadBtn" class="download-btn">Download</button>
    </div>
  </div>
</Layout>

<style>
  .fatal-page {
    padding: 0rem 2rem;
    padding-bottom: 2rem;
  }

  h1 {
    font-family: var(--font-bungee);
    font-size: 5rem;
    text-align: center;
    margin-bottom: 4rem;
    color: #ff3a3a;
    text-shadow: 
      2px 2px 0 #000,
      -2px -2px 0 #000,
      2px -2px 0 #000,
      -2px 2px 0 #000;
    letter-spacing: 0.1em;
  }

  .badge {
    display: inline-block;
    background-color: #ff3a3a;
    color: white;
    font-size: 1.5rem;
    padding: 0.2rem 0.5rem;
    border-radius: 0.5rem;
    margin-left: 1rem;
    vertical-align: middle;
    font-family: var(--font-montserrat);
    font-weight: bold;
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100vh;
    overflow: auto;
    background-color: rgba(0,0,0,0.9);
  }

  .modal-content {
    position: relative;
    margin: 2rem auto;
    padding: 1rem;
    width: 90%;
    max-width: 1200px;
    height: auto;
    max-height: 90vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal-image {
    max-width: 100%;
    max-height: 85vh;
    object-fit: contain;
    border-radius: 8px;
  }

  .close-modal {
    color: #f1f1f1;
    position: absolute;
    top: -2rem;
    right: 1rem;
    font-size: 40px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1001;
  }

  .close-modal:hover {
    color: #ff3a3a;
  }

  .download-btn {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    background-color: #ff3a3a;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    cursor: pointer;
    font-family: var(--font-montserrat);
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .download-btn:hover {
    background-color: #ff5555;
  }

  .disclaimer {
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    color: #495057;
    margin-top: 2rem;
    padding: 1rem;
    display: flex;
    align-items: flex-start;
    font-family: var(--font-montserrat);
    font-size: 0.9rem;
    line-height: 1.5;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }

  .disclaimer-icon {
    flex-shrink: 0;
    width: 20px;
    height: 20px;
    margin-right: 0.75rem;
    margin-top: 0.2rem;
    color: #6c757d;
  }

  @media (max-width: 768px) {
    .fatal-page {
      padding: 2rem 1rem;
    }
    
    h1 {
      font-size: 3rem;
      margin-bottom: 2rem;
    }
    
    .badge {
      font-size: 1rem;
      padding: 0.1rem 0.3rem;
      margin-left: 0.5rem;
    }

    .disclaimer {
      font-size: 0.8rem;
      padding: 0.75rem;
    }

    .disclaimer-icon {
      width: 16px;
      height: 16px;
      margin-right: 0.5rem;
    }
  }
</style>

<script>
  function downloadImage(url: string, filename: string): void {
    fetch(url)
      .then(response => response.blob())
      .then(blob => {
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      });
  }

  function setupModal(): void {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage') as HTMLImageElement;
    const closeModal = document.getElementById('closeModal');
    const downloadBtn = document.getElementById('downloadBtn') as HTMLButtonElement;
    const viewSolutionBtns = document.querySelectorAll('.viewSolutionBtn');

    if (!modal || !modalImage || !closeModal || !downloadBtn) {
      console.error('Modal elements not found');
      return;
    }

    viewSolutionBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const imageUrl = btn.getAttribute('data-image');
        const imageName = btn.getAttribute('data-name');
        
        if (imageUrl) {
          modal.style.display = "block";
          modalImage.src = imageUrl;
          modalImage.alt = imageName || '';
          downloadBtn.style.display = "block";
        }
      });
    });

    closeModal.addEventListener('click', () => {
      modal.style.display = "none";
      downloadBtn.style.display = "none";
    });

    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        modal.style.display = "none";
        downloadBtn.style.display = "none";
      }
    });

    downloadBtn.addEventListener('click', () => {
      const imageUrl = modalImage.src;
      const filename = `${modalImage.alt}.webp`;
      downloadImage(imageUrl, filename);
    });
  }

  // Execute the setup when the DOM is ready
  document.addEventListener('DOMContentLoaded', setupModal);
</script>

