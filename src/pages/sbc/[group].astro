---
import Layout from '../../layouts/Layout.astro';
import sbcGroups from '../../data/sbc-data';
import styles from './sbc-group.module.css';

export function getStaticPaths() {
  return sbcGroups.map(group => ({
    params: { group: group.name.toLowerCase().replace(/\s+/g, '-') },
    props: { group },
  }));
}

const { group } = Astro.props;
---

<Layout title={`MadFut - ${group.name} SBC`}>
  <main class={styles.main}>
    <header class={styles.header}>
      <h1 class={styles.title}>{group.name}</h1>
      <p class={styles.count}>{group.templatesCount} templates</p>
    </header>
    <img src={group.imageUrl} alt={group.name} class={styles.groupImage} />
    <div class={styles.templateGrid}>
      {group.templates.map((template) => (
        <div class={styles.templateItem}>
          <h3 class={styles.templateName}>{template.name}</h3>
          <button 
            type="button"
            class="viewSolutionBtn"
            data-image={template.imageUrl}
            data-name={template.name}
          >
            View Solution
          </button>
        </div>
      ))}
    </div>
  </main>

  <div id="imageModal" class={styles.modal}>
    <div class={styles.modalContent}>
      <span id="closeModal" class={styles.closeModal}>&times;</span>
      <img id="modalImage" class={styles.modalImage} src="" alt="" />
    </div>
  </div>

  <script>
    function setupModal() {
      const modal = document.getElementById('imageModal');
      const modalImage = document.getElementById('modalImage') as HTMLImageElement;
      const closeModal = document.getElementById('closeModal');
      const viewSolutionBtns = document.querySelectorAll('.viewSolutionBtn');

      if (!modal || !modalImage || !closeModal) {
        console.error('Modal elements not found');
        return;
      }

      viewSolutionBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          const imageUrl = btn.getAttribute('data-image');
          const imageName = btn.getAttribute('data-name');
          
          if (imageUrl) {
            modal.style.display = "block";
            modalImage.src = imageUrl;
            modalImage.alt = imageName || '';
          }
        });
      });

      closeModal.addEventListener('click', () => {
        modal.style.display = "none";
      });

      window.addEventListener('click', (event) => {
        if (event.target === modal) {
          modal.style.display = "none";
        }
      });
    }

    // Execute the setup when the DOM is ready
    document.addEventListener('DOMContentLoaded', setupModal);
  </script>
</Layout>

<style>
  .viewSolutionBtn {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    cursor: pointer;
    font-family: var(--font-montserrat);
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .viewSolutionBtn:hover {
    background-color: #45a049;
  }
</style>

